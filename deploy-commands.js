// deploy-commands.js
import "dotenv/config";
import { REST, Routes, SlashCommandBuilder } from "discord.js";

// --- ‚öôÔ∏è Defini√ß√£o dos comandos Slash
const commands = [
  new SlashCommandBuilder()
    .setName("registrar")
    .setDescription("üéÆ Inicia seu registro no sistema da Arena Mythos House."),
  
  new SlashCommandBuilder()
    .setName("queue")
    .setDescription("üïπÔ∏è Entra na fila para jogar uma partida Inhouse."),

  new SlashCommandBuilder()
    .setName("sairdafila")
    .setDescription("üö™ Sai da fila atual."),

  new SlashCommandBuilder()
    .setName("fila")
    .setDescription("üìã Mostra os jogadores em cada s√©rie e o total geral.")
].map(cmd => cmd.toJSON());

// --- üîê Inicializa√ß√£o do cliente REST
const rest = new REST({ version: "10" }).setToken(process.env.TOKEN);

// --- üöÄ Fun√ß√£o principal de deploy
async function deployCommands() {
  try {
    console.log("üîÑ Iniciando atualiza√ß√£o dos comandos Slash...");

    if (!process.env.CLIENT_ID) {
      throw new Error("‚ùå CLIENT_ID n√£o definido no arquivo .env!");
    }

    if (process.env.GUILD_ID) {
      // ‚úÖ Registro instant√¢neo (modo de teste / desenvolvimento)
      await rest.put(
        Routes.applicationGuildCommands(process.env.CLIENT_ID, process.env.GUILD_ID),
        { body: commands }
      );
      console.log(`‚úÖ Comandos registrados instantaneamente no servidor de teste: ${process.env.GUILD_ID}`);
    } else {
      // üåç Registro global (pode levar at√© 1h para propagar)
      await rest.put(
        Routes.applicationCommands(process.env.CLIENT_ID),
        { body: commands }
      );
      console.log("üåç Comandos globais registrados com sucesso!");
    }

    console.log("üéØ Deploy dos comandos finalizado com √™xito!");
    console.log(`üì¶ Comandos: ${commands.map(c => c.name).join(", ")}`);
  } catch (error) {
    console.error("‚ùå Erro ao registrar comandos Slash:");
    console.error(error);
  }
}

// --- üß© Execu√ß√£o autom√°tica
deployCommands();
